#!/usr/bin/env node
const fs = require('fs');
const common = require('./common.js');

const versionPropertyPrefixes = ['firmware', 'deviceProtocol', 'moduleProtocol', 'userConfig', 'hardwareConfig', 'smartMacros'];
const patchVersions = ['Major', 'Minor', 'Patch'];
const package = JSON.parse(fs.readFileSync(`${__dirname}/package.json`));

const versionVariables = versionPropertyPrefixes.map(versionPropertyPrefix => {
    const versionPropertyName = `${versionPropertyPrefix}Version`
    const versionPropertyValues = package[versionPropertyName].split('.');
    return patchVersions.map(patchVersion => {
        const versionPropertyValue = versionPropertyValues.shift();
        const versionPropertyMacroName = `${versionPropertyPrefix}${patchVersion}Version`.split(/(?=[A-Z])/).join('_').toUpperCase()
        return `    #define ${versionPropertyMacroName} ${versionPropertyValue}`;
    }).join('\n') + '\n';
}).join('\n');

const gitInfo = common.getGitInfo();

fs.writeFileSync(`${__dirname}/../shared/versions.h`,
`// Please do not edit this file by hand!
// It is to be regenerated by /scripts/generate-versions-h.js

#ifndef __VERSIONS_H__
#define __VERSIONS_H__

// Includes:

    #include "fsl_common.h"

// Macros:

#define VERSION_AT_LEAST(v, MAJ, MIN, PATCH) \\
    (\\
        ((v).major > (MAJ)) \\
        || ((v).major == (MAJ) && (v).minor > (MIN))\\
        || ((v).major == (MAJ) && (v).minor == (MIN) && (v).patch >= (PATCH))\\
    )

// Typedefs:

    typedef struct {
        uint16_t major;
        uint16_t minor;
        uint16_t patch;
    } version_t;

// Variables:

${versionVariables}

#define GIT_REPO "${gitInfo.repo}"
#define GIT_TAG "${gitInfo.tag}"

#endif
`);
